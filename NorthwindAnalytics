--In this SQL code, I'm querying a database that's holding information with Microsoft's sample database for SQL Server named Northwind to answer questions about the data. 

--1. For each product, display its name (product_name), the name of the category it belongs to (category_name), quantity per unit (quantity_per_unit), the unit price (unit_price), and the number of units in stock (units_in_stock). Order the results by unit price.
SELECT
  p.product_name,
  c.category_name,
  p.quantity_per_unit,
  p.unit_price,
  p.units_in_stock
FROM products p
JOIN categories c
ON c.category_id = p.category_id
ORDER BY p.unit_price;

--2. We'd like to see information about all the suppliers who provide the store four or more different products. Show the following columns: supplier_id, company_name, and products_count (the number of products supplied).
SELECT
  s.supplier_id,
  s.company_name,
  COUNT(p.supplier_id) AS products_count
FROM suppliers s
JOIN products p
ON s.supplier_id = p.supplier_id
GROUP BY s.supplier_id
HAVING count(p.supplier_id) >= 4;

--3. Display the list of products purchased in the order with ID equal to 10250. Show the following information: product name (product_name), the quantity of the product ordered (quantity), the unit price (unit_price from the order_items table), the discount (discount), and the order_date. Order the items by product name.
SELECT
  p.product_name,
  oi.quantity,
  oi.unit_price,
  oi.discount,
  o.order_date
FROM products p
JOIN order_items oi
ON p.product_id = oi.product_id
JOIN orders o
ON oi.order_id = o.order_id
WHERE o.order_id = 10250
ORDER BY p.product_name;

--4. Show the following information related to all items with order_id = 10248: the product name, the unit price (taken from the order_items table), the quantity, and the name of the supplier's company (as supplier_name).
SELECT 
  p.product_name,
  oi.unit_price,
  oi.quantity,
  s.company_name AS supplier_name
FROM products p
JOIN order_items oi
  ON p.product_id = oi.product_id
JOIN suppliers s
  ON s.supplier_id = p.supplier_id
WHERE oi.order_id = 10248;

--5. Count the number of employees hired in 2013. Name the result number_of_employees.
SELECT
  COUNT(*) AS number_of_employees
FROM employees
WHERE hire_date >= '2013-01-01'
AND hire_date <= '2013-12-31';

--6. Show each supplier_id alongside the company_name and the number of products they supply (as the products_count column). Use the products and suppliers tables.
SELECT
  s.supplier_id,
  s.company_name,
  COUNT(*) AS products_count
FROM suppliers s
JOIN products p
ON s.supplier_id = p.supplier_id
GROUP BY s.supplier_id;

--7. The template code shows the query from the explanation. The Northwind store offers its customers discounts for some products. The discount for each item is stored in the discount column of the order_items table. (For example, a 0.20 discount means that the customer pays 1 - 0.2 = 0.8 of the original price.) Your task is to add a second column named total_price_after_discount.
SELECT
  SUM(unit_price * quantity) AS total_price,
  SUM(unit_price * quantity * (1 - discount)) AS total_price_after_discount
FROM orders o
JOIN order_items oi 
  ON o.order_id = oi.order_id
WHERE o.order_id = 10250;

--8. We want to know the number of orders processed by each employee. Show the following columns: employee_id, first_name, last_name, and the number of orders processed as orders_count.
SELECT
  e.employee_id,
  e.first_name,
  e.last_name,
  COUNT(*) AS orders_count
FROM employees e
JOIN orders o
ON e.employee_id = o.employee_id
GROUP BY e.employee_id, e.first_name, e.last_name;

--9. How much are the products in stock in each category worth? Show three columns: category_id, category_name, and category_total_value. You'll calculate the third column as the sum of unit prices multiplied by the number of units in stock for all products in the given category.
SELECT
  c.category_id,
  c.category_name,
  SUM(p.unit_price * units_in_stock) AS category_total_value
FROM categories c
JOIN products p
  ON c.category_id = p.category_id
GROUP BY c.category_id, c.category_name;

--10. Count the number of orders placed by each customer. Show the customer_id, company_name, and orders_count columns.
SELECT
  cu.customer_id,
  cu.company_name,
  COUNT(*) AS orders_count
FROM customers cu
JOIN orders o
  ON cu.customer_id = o.customer_id
GROUP BY cu.customer_id,
  cu.company_name;
  
--11. Which customers paid the most for orders made in June 2016 or July 2016? Show two columns: 1. company_name 2.total_paid, calculated as the total price (after discount) paid for all orders made by a given customer in June 2016 or July 2016. Sort the results by total_paid in descending order.
SELECT
  cu.company_name,
  SUM(oi.unit_price * oi.quantity * (1 - oi.discount)) AS total_paid
FROM customers cu
JOIN orders o
  ON cu.customer_id = o.customer_id
JOIN order_items oi
  ON o.order_id = oi.order_id
WHERE o.order_date >= '2016-06-01'
  AND o.order_date <= '2016-07-31'
GROUP BY o.customer_id, cu.company_name
ORDER BY total_paid desc;

--12. Count the total number of customers and all those with a fax number. Show two columns: all_customers_count and customers_with_fax_count.
SELECT
  COUNT(*) as all_customers_count,
  COUNT(fax) AS customers_with_fax_count
FROM customers;

--13. Find the total number of products provided by each supplier. Show the company_name and products_count (the number of products supplied) columns. Include suppliers that haven't provided any products.
SELECT
  s.company_name,
  COUNT(p.product_id) AS products_count
FROM suppliers s
LEFT JOIN products p
  ON s.supplier_id = p.supplier_id
GROUP BY s.supplier_id, s.company_name;

--14. Show the number of unique companies (as number_of_companies) that had orders shipped to Spain.
SELECT
  COUNT(DISTINCT customer_id) AS number_of_companies
FROM orders
WHERE ship_country = 'Spain';

--15. Find the total number of products supplied by each supplier. Show the following columns: supplier_id, company_name, and products_supplied_count (the number of products supplied by that company). Show also suppliers that supply no products.
SELECT
  s.supplier_id,
  s.company_name,
  COUNT(p.product_id) AS products_supplied_count
FROM suppliers s
LEFT JOIN products p
  ON s.supplier_id = p.supplier_id
GROUP BY s.supplier_id, s.company_name;

--16. How many distinct products are there in all orders shipped to France? Name the result distinct_products.
SELECT
  COUNT(DISTINCT oi.product_id) AS distinct_products
FROM order_items oi
JOIN orders o
  ON o.order_id = oi.order_id
WHERE ship_country = 'France';

--17. For each employee, compute the total order value before discount from all orders processed by this employee between 5 July 2016 and 31 July 2016. Ignore employees without any orders processed. Show the following columns: first_name, last_name, and sum_orders. Sort the results by sum_orders in descending order.
SELECT
  e.first_name,
  e.last_name,
  SUM(oi.unit_price * oi.quantity) AS sum_orders
FROM employees e
JOIN orders o
  ON e.employee_id = o.employee_id
JOIN order_items oi
  ON oi.order_id = o.order_id
WHERE order_date >= '2016-07-05'
  AND order_date <= '2016-07-31'
GROUP BY e.employee_id, e.first_name, e.last_name
ORDER BY sum_orders desc;

--18. Run the template query from the explanation. Compare the values in the units_in_stock and availability columns.
SELECT
  product_id,
  product_name,
  units_in_stock,
  CASE
    WHEN units_in_stock > 100 THEN 'high'
    WHEN units_in_stock > 50 THEN 'moderate'
    WHEN units_in_stock > 0 THEN 'low'
    WHEN units_in_stock = 0 THEN 'none'
  END AS availability
FROM products;

--19. We want to create a report measuring the level of experience each Northwind employee has with the company. Show the first_name, last_name, hire_date, and experience columns for each employee. The experience column should display the following values: 'junior' for employees hired after Jan. 1, 2014, 'middle' for employees hired after Jan. 1, 2013 but before Jan. 1, 2014, 'senior' for employees hired on or before Jan. 1, 2013.'
SELECT
  first_name,
  last_name,
  hire_date,
  CASE
    WHEN hire_date > '2014-01-01' THEN 'junior'
    WHEN hire_date BETWEEN '2013-01-01' AND '2014-01-01' THEN 'middle'
    WHEN hire_date <= '2013-01-01' THEN 'senior'
    ELSE NULL
  END AS experience
FROM employees;

--20. Run the template query, and compare the values in the ship_country and shipping_cost columns. For countries other than the US and Canada, the shipping_cost value is NULL.
SELECT 
  order_id,
  customer_id,
  ship_country,
  CASE
    WHEN ship_country = 'USA' OR ship_country = 'Canada' THEN 0.0
  END AS shipping_cost
FROM orders
WHERE order_id BETWEEN 10720 AND 10730;

--21. We want to show the following basic customer information (from the customers table): customer_id, company_name, country, language. The value of the language column will be decided by the following rules: 'German' for companies from Germany, Switzerland, and Austria; 'English' for companies from the UK, Canada, the USA, and Ireland; 'Other' for all other countries.
SELECT
  customer_id,
  company_name,
  country,
  CASE
    WHEN country IN ('Germany', 'Switzerland', 'Austria') THEN 'German'
    WHEN country IN ('UK', 'Canada', 'USA', 'Ireland') THEN 'English'
    ELSE 'Other'
    END AS language
FROM customers;

--22. Let's create a report that will divide all products into vegetarian and non-vegetarian categories. For each product, show the following columns: product_name, category_name, diet_type: 'Non-vegetarian' for products from the categories 'Meat/Poultry' and 'Seafood' and 'Vegetarian' for any other category.
SELECT
  p.product_name,
  c.category_name,
  CASE
    WHEN c.category_name IN ('Meat/Poultry', 'Seafood') THEN 'Non-vegetarian'
    ELSE 'Vegetarian'
    END AS diet_type
FROM products p
JOIN categories c
ON c.category_id = p.category_id;

--23. Create a report that shows the number of products supplied from a specific continent. Display two columns: supplier_continent and product_count. The supplier_continent column should have the following values: 'North America' for products supplied from 'USA' and 'Canada', 'Asia' for products from 'Japan' and 'Singapore', 'Other' for other countries.
SELECT
  CASE 
    WHEN s.country IN ('USA', 'Canada') THEN 'North America'
    WHEN s.country IN ('Japan', 'Singapore') THEN 'Asia'
    ELSE 'Other'
    END AS supplier_continent,
  COUNT(product_id) AS product_count
FROM suppliers s
JOIN products p
ON s.supplier_id = p.supplier_id
GROUP BY 
  CASE 
    WHEN country IN ('USA', 'Canada') THEN 'North America'
    WHEN country IN ('Japan', 'Singapore') THEN 'Asia'
    ELSE 'Other'
  END;
  
 --24. We want to create a simple report that will show the number of young and old employees at Northwind. Show two columns: age and employee_count. The age column has the following values: 'young' for people born after Jan. 1, 1980, 'old' for all other employees.
 SELECT
  CASE
    WHEN birth_date > '1980-01-01' THEN 'young'
    ELSE 'old'
  END AS age,
  COUNT(*) AS employee_count
FROM employees
GROUP BY 
  CASE
    WHEN birth_date > '1980-01-01' THEN 'young'
    ELSE 'old'
  END;
  
  --25. How many customers are represented by owners (contact_title = 'Owner'), and how many aren't? Show two columns with appropriate values: represented_by_owner and not_represented_by_owner.
  SELECT
  COUNT(
    CASE
      WHEN contact_title = 'Owner' then customer_id END) 
      AS represented_by_owner,
  COUNT(
    CASE
      WHEN contact_title != 'Owner' then customer_id END) 
    AS not_represented_by_owner
FROM customers;

--26. Washington (WA) is Northwind's primary region. How many orders have been processed by employees in the WA region, and how many by employees in other regions? Show two columns with their respective counts: orders_wa_employees and orders_not_wa_employees.
SELECT
  COUNT(
    CASE
      WHEN region = 'WA' THEN order_id END)
    AS orders_wa_employees,
  COUNT(
    CASE
      WHEN region != 'WA' then order_id END)
    AS orders_not_wa_employees
FROM employees
JOIN orders
  ON orders.employee_id = employees.employee_id;
